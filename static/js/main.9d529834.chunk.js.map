{"version":3,"sources":["components/Atom.tsx","components/Canvas/Rectangle/RectangleLocationContainer.tsx","components/Canvas/Rectangle/RectangleInner.tsx","components/Canvas/utils/Drag.tsx","components/Canvas/Rectangle/Rectangle.tsx","components/Canvas/Canvas.tsx","components/TodoTable/AddTodoIconBtn.tsx","components/TodoTable/AddTodoForm.tsx","components/widgets/ConfirmDeleteDialog.tsx","components/TodoTable/ListBox.tsx","components/TodoTable/ListTable.tsx","components/TodoTable/TodoTablePanel.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["localStorageKeyName","localStorageEffect","key","setSelf","onSet","savedValue","localStorage","getItem","JSON","parse","debounce","newValue","setItem","stringify","TodoIDListAtom","atom","default","effects_UNSTABLE","ID_LIST","DefaultValue","Object","keys","filter","e","map","split","pop","reduce","prev","cur","undefined","add","Set","forEach","includes","removeItem","OneTodoStateAtom","atomFamily","itemID","id","title","description","completed","important","urgent","inCanvas","isEditing","TODO_ITEM","RectangleStateAtom","position","top","left","size","width","height","RECTANGLE_STATE","CanvasStateAtom","AreaRangeAtom","topLeft","topMin","leftMin","topMax","leftMax","topRight","bottomLeft","bottomRight","sortTodoIDsList","selector","get","sortTmp","sort","a","b","RectangleLocationContainer","children","onSelect","style","onMouseDown","onClick","stopPropagation","RectangleInner","visible","selected","border","transition","display","padding","flex","borderRadius","backgroundColor","Drag","memo","onDrag","range","nodeRef","useRef","event","movementX","movementY","ref","Rectangle","useRecoilState","rectangleState","setRectangleState","useState","isSelected","setIsSelected","oneTodo","useRecoilValue","AreaRange","useMemo","console","log","Canvas","ids","setCanvasState","useSetRecoilState","setAreaRange","canvasRef","topLeftAreaRef","topRightAreaRef","bottomLeftAreaRef","bottomRightAreaRef","changeCanvasState","useCallback","current","clientHeight","clientWidth","refToRange","offsetTop","offsetLeft","offsetHeight","offsetWidth","useEffect","handleWindowResize","throttle","window","addEventListener","removeEventListener","direction","templateColumns","templateRows","gap","writingMode","textOrientation","background","eachID","AddTodo","setIds","aria-label","isRound","icon","as","GrAdd","newID","uuidV4","AddTodoForm","useForm","register","handleSubmit","errors","formState","setValue","createNewTodo","useRecoilCallback","set","newTodo","onSubmit","data","itemName","variant","placeholder","isInvalid","required","maxLength","colorScheme","type","ConfirmDeleteDialog","isOpen","onClose","onClickConfirm","cancelRef","React","leastDestructiveRef","fontSize","fontWeight","ml","toggleOneTodo","felid","removeOneIDInIDList","list","ListBox","setOneTodo","setIDs","setRectangle","isDeleteDialogOpen","setIsDeleteDialogOpen","onDeleteDialogClose","getAreaInitLocation","h","marginBottom","justifyContent","alignItems","newTitleName","autoFocus","w","form","VscCheck","VscClose","isChecked","onChange","onDoubleClick","willUrgent","initRectPosition","willImportant","BiEraser","GiPencilBrush","IconButton","ListTable","todoList","flipKey","join","divider","borderColor","spacing","align","data-testid","flipId","TodoTablePanel","AddTodoIconBtn","App","margin","colSpan","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d529834.chunk.js","sourcesContent":["import {atom, AtomEffect, atomFamily, DefaultValue, selector} from 'recoil';\nimport {RectangleStyleType, ID, TodoType, CanvasStateType, RectangleRangeType} from '../type';\nimport {debounce} from 'lodash';\n\ntype TodoIDListType = ID[];\n\nenum localStorageKeyName {\n    ID_LIST = 'ID_LIST',\n    TODO_ITEM = 'TODO_ITEM',\n    RECTANGLE_STATE = 'RECTANGLE_STATE',\n}\n\n// store atom in local storage\nconst localStorageEffect = (key: string): AtomEffect<any> => ({setSelf, onSet}) => {\n    const savedValue = localStorage.getItem(key);\n    // if value in local storage\n    if (savedValue !== null) {\n        setSelf(JSON.parse(savedValue));\n    }\n\n    onSet(\n        debounce((newValue: any) => {\n            localStorage.setItem(key, JSON.stringify(newValue));\n        }, 500),\n    );\n};\n\nconst gc_localStorage_effect: AtomEffect<ID[]> = ({onSet}) => {\n    onSet((newValue) => {\n        if (newValue instanceof DefaultValue) return;\n\n        const storageExistIDs = Object.keys(localStorage)\n            .filter((e) => e !== 'ID_LIST')\n            .map((e) => e.split('_').pop())\n            .reduce((prev, cur) => {\n                if (cur !== undefined) return prev.add(cur);\n                else return prev;\n            }, new Set<string>());\n\n        storageExistIDs.forEach((e) => {\n            if (!newValue.includes(e)) {\n                localStorage.removeItem(`RECTANGLE_STATE_${e}`);\n                localStorage.removeItem(`TODO_ITEM_${e}`);\n            }\n        });\n    });\n};\n\nexport const TodoIDListAtom = atom<TodoIDListType>({\n    key: 'TodoIDList',\n    default: [],\n    effects_UNSTABLE: [localStorageEffect(localStorageKeyName.ID_LIST), gc_localStorage_effect],\n});\n\nexport const OneTodoStateAtom = atomFamily<TodoType, ID>({\n    key: 'oneTodoState',\n    default: (itemID) => ({\n        id: itemID,\n        title: '',\n        description: '',\n        completed: false,\n        important: false,\n        urgent: false,\n        inCanvas: false,\n        isEditing: true,\n    }),\n    effects_UNSTABLE: (id) => [localStorageEffect(`${localStorageKeyName.TODO_ITEM}_${id}`)],\n});\n\nexport const RectangleStateAtom = atomFamily<RectangleStyleType, ID>({\n    key: 'RectangleState',\n    default: {position: {top: 0, left: 0}, size: {width: 100, height: 50}},\n    effects_UNSTABLE: (id) => [localStorageEffect(`${localStorageKeyName.RECTANGLE_STATE}_${id}`)],\n});\n\nexport const CanvasStateAtom = atom<CanvasStateType>({\n    key: 'CanvasState',\n    default: {height: 3000, width: 3000},\n});\n\nexport const AreaRangeAtom = atom<{\n    topLeft: RectangleRangeType;\n    topRight: RectangleRangeType;\n    bottomLeft: RectangleRangeType;\n    bottomRight: RectangleRangeType;\n}>({\n    key: 'AreaRangeAtom',\n    default: {\n        topLeft: {topMin: 0, leftMin: 0, topMax: 0, leftMax: 0},\n        topRight: {topMin: 0, leftMin: 0, topMax: 0, leftMax: 0},\n        bottomLeft: {topMin: 0, leftMin: 0, topMax: 0, leftMax: 0},\n        bottomRight: {topMin: 0, leftMin: 0, topMax: 0, leftMax: 0},\n    },\n});\n\nexport const sortTodoIDsList = selector<ID[]>({\n    key: 'sortTodoIDsList',\n    get: ({get}) => {\n        const ids = get(TodoIDListAtom);\n        const sortTmp = ids.map((id) => get(OneTodoStateAtom(id)));\n        sortTmp.sort((a, b) => {\n            if (a.completed && !b.completed) return 1;\n            else if (!a.completed && b.completed) return -1;\n            else return 0;\n        });\n        return sortTmp.map((e) => e.id);\n    },\n});\n","// location container handel rectangle position and size\n\nimport {Box} from '@chakra-ui/react';\nimport {RectangleStyleType} from '../../../type';\n\ntype RectangleLocationContainerProps = {\n    position: RectangleStyleType['position'];\n    size: RectangleStyleType['size'];\n    onSelect: () => void;\n};\n\nexport const RectangleLocationContainer: React.FC<RectangleLocationContainerProps> = ({\n    children,\n    size,\n    position,\n    onSelect,\n}) => {\n    return (\n        <Box\n            position=\"absolute\"\n            style={{...size, ...position}}\n            onMouseDown={() => onSelect()}\n            onClick={(e) => e.stopPropagation()}>\n            {children}\n        </Box>\n    );\n};\n","// Container for content in rectangle\n\nimport {Box} from '@chakra-ui/react';\n\nconst getBorderColor = (visible: boolean) => {\n    return visible ? '#CCC' : 'transparent';\n};\n\nexport const RectangleInner = ({\n    selected,\n    title,\n    description,\n}: {\n    selected: boolean;\n    title: string;\n    description: string;\n}) => {\n    return (\n        <Box\n            border={`1px solid ${getBorderColor(selected)}`}\n            transition=\"0.1s border-color ease-in-out\"\n            width=\"100%\"\n            height=\"100%\"\n            display=\"flex\"\n            padding=\"2px\">\n            <Box\n                flex=\"1\"\n                border=\"3px dashed #101010\"\n                borderRadius=\"255px 15px 225px 15px/15px 225px 15px 255px\"\n                backgroundColor=\"white\">\n                {title}\n                {description}\n            </Box>\n        </Box>\n    );\n};\n","import {memo, useEffect, useRef} from 'react';\nimport {DraggableCore} from 'react-draggable';\nimport {RectangleRangeType, RectangleStyleType} from '../../../type';\n\ntype DragProps = {\n    position: RectangleStyleType['position']; // Position represent left top point of child location\n    onDrag: (position: RectangleStyleType['position']) => void;\n    range: RectangleRangeType;\n};\n\nexport const Drag: React.FC<DragProps> = memo(({position, onDrag, range, children}) => {\n    const nodeRef = useRef(null);\n    const {leftMin, leftMax, topMin, topMax} = range;\n    // useEffect(() => {\n    //     const {leftMin, leftMax, topMin, topMax} = range;\n    //     let {left, top} = position;\n    //     if (left < leftMin) left = leftMin;\n    //     if (top < topMin) top = topMin;\n    //     if (left > leftMax) left = leftMax;\n    //     if (top > topMax) top = topMax;\n    //     onDrag({left, top});\n    // }, []);\n\n    return (\n        <DraggableCore\n            nodeRef={nodeRef}\n            onDrag={(event: any) => {\n                let left = event.movementX + position.left;\n                let top = event.movementY + position.top;\n                if (left < leftMin) left = leftMin;\n                if (top < topMin) top = topMin;\n                if (left > leftMax) left = leftMax;\n                if (top > topMax) top = topMax;\n                onDrag({left, top});\n            }}>\n            {/* style={{width: 100, height: 100, border: '1px solid #f00'}} */}\n            <div ref={nodeRef}>{children}</div>\n            {/* {children} */}\n        </DraggableCore>\n    );\n});\n","import {useEffect, useMemo, useState} from 'react';\nimport {RectangleLocationContainer} from './RectangleLocationContainer';\nimport {RectangleInner} from './RectangleInner';\nimport {Drag} from '../utils/Drag';\n// import {Resize} from '../util/Resize';\nimport {ID} from '../../../type';\nimport {AreaRangeAtom, CanvasStateAtom, OneTodoStateAtom, RectangleStateAtom} from '../../Atom';\nimport {useRecoilState, useRecoilValue} from 'recoil';\n\nexport const Rectangle = ({itemID}: {itemID: ID}) => {\n    const [rectangleState, setRectangleState] = useRecoilState(RectangleStateAtom(itemID));\n    const [isSelected, setIsSelected] = useState(false);\n    const oneTodo = useRecoilValue(OneTodoStateAtom(itemID));\n    // const canvasState = useRecoilValue(CanvasStateAtom);\n    const AreaRange = useRecoilValue(AreaRangeAtom);\n\n    const range = useMemo(() => {\n        const {urgent, important} = oneTodo;\n        if (urgent && important) return AreaRange.topLeft;\n        else if (urgent && !important) return AreaRange.bottomLeft;\n        else if (!urgent && important) return AreaRange.topRight;\n        else return AreaRange.bottomRight;\n    }, [AreaRange, oneTodo]);\n\n    //  change location\n    // useEffect(() => {\n    //     let {left, top} = rectangleState.position;\n    //     if (left < 0) left = 0;\n    //     if (top < 0) top = 0;\n    //     if (left > range.leftMax - rectangleState.size.width) left = range.leftMax - rectangleState.size.width;\n    //     if (top > range.topMax - rectangleState.size.height) top = range.topMax - rectangleState.size.height;\n    //     setRectangleState((prev) => ({...prev, position: {left, top}}));\n    // }, [\n    //     setRectangleState,\n    //     range,\n    //     rectangleState.size.width,\n    //     rectangleState.size.height,\n    //     rectangleState.position.left,\n    //     rectangleState.position.top,\n    // ]);\n\n    if (oneTodo === null || !oneTodo?.inCanvas) return null;\n\n    return (\n        <RectangleLocationContainer\n            position={rectangleState.position}\n            size={rectangleState.size}\n            onSelect={() => {\n                console.log(\"I've been selected!\");\n                setIsSelected((prev) => true);\n            }}>\n            {/* resize */}\n            {/* <Resize\n                selected={isSelected}\n                onResize={(style) => {\n                    setRectangleState({...rectangleState, style});\n                }}\n                position={rectangleState.style.position}\n                size={rectangleState.style.size}> */}\n            {/* drag */}\n            <Drag\n                position={rectangleState.position}\n                onDrag={(position) => {\n                    setRectangleState({\n                        ...rectangleState,\n                        position,\n                    });\n                }}\n                range={{\n                    leftMin: range.leftMin,\n                    topMin: range.topMin,\n                    leftMax: range.leftMax - rectangleState.size.width,\n                    topMax: range.topMax - rectangleState.size.height,\n                }}>\n                {/* drag component */}\n                <div\n                    style={{\n                        width: rectangleState.size.width,\n                        height: rectangleState.size.height,\n                    }}>\n                    <RectangleInner selected={isSelected} title={oneTodo.title} description={oneTodo.description} />\n                </div>\n            </Drag>\n            {/* </Resize> */}\n        </RectangleLocationContainer>\n    );\n};\n","import {Box, Flex, Grid, GridItem, Text} from '@chakra-ui/react';\nimport {throttle} from 'lodash';\nimport {useCallback, useEffect, useRef} from 'react';\nimport {useRecoilValue, useSetRecoilState} from 'recoil';\nimport {AreaRangeAtom, CanvasStateAtom, TodoIDListAtom} from '../Atom';\nimport {Rectangle} from './Rectangle/Rectangle';\n\nexport const Canvas: React.FC = () => {\n    const ids = useRecoilValue(TodoIDListAtom);\n    const setCanvasState = useSetRecoilState(CanvasStateAtom);\n    const setAreaRange = useSetRecoilState(AreaRangeAtom);\n    const canvasRef = useRef<HTMLDivElement>(null);\n    const topLeftAreaRef = useRef<HTMLDivElement>(null);\n    const topRightAreaRef = useRef<HTMLDivElement>(null);\n    const bottomLeftAreaRef = useRef<HTMLDivElement>(null);\n    const bottomRightAreaRef = useRef<HTMLDivElement>(null);\n\n    const changeCanvasState = useCallback(() => {\n        let height: number, width: number;\n        if (canvasRef.current !== null) {\n            height = canvasRef.current.clientHeight;\n            width = canvasRef.current.clientWidth;\n            setCanvasState({height, width});\n        }\n\n        const refToRange = (ref: HTMLDivElement) => {\n            const {offsetTop, offsetLeft, offsetHeight, offsetWidth} = ref;\n            return {\n                leftMin: offsetLeft,\n                topMin: offsetTop,\n                leftMax: offsetLeft + offsetWidth,\n                topMax: offsetTop + offsetHeight,\n            };\n        };\n        if (\n            topLeftAreaRef.current !== null &&\n            topRightAreaRef.current !== null &&\n            bottomLeftAreaRef.current !== null &&\n            bottomRightAreaRef.current !== null\n        ) {\n            setAreaRange({\n                topLeft: refToRange(topLeftAreaRef.current),\n                topRight: refToRange(topRightAreaRef.current),\n                bottomLeft: refToRange(bottomLeftAreaRef.current),\n                bottomRight: refToRange(bottomRightAreaRef.current),\n            });\n        }\n    }, [setCanvasState, setAreaRange]);\n\n    // change canvas size when resizing the windows\n    useEffect(() => {\n        const handleWindowResize = throttle(changeCanvasState, 300);\n\n        window.addEventListener('resize', handleWindowResize);\n\n        return () => {\n            window.removeEventListener('resize', handleWindowResize);\n        };\n    }, [changeCanvasState]);\n\n    // set canvas size\n    useEffect(changeCanvasState, [changeCanvasState]);\n\n    return (\n        <Flex\n            ref={canvasRef}\n            position=\"relative\"\n            direction=\"column\"\n            width=\"100%\"\n            height=\"100%\"\n            // style={{border: '10px solid #f00'}}\n            onClick={(e) => {\n                // TODO: clean selected components\n                console.log('click canvas');\n            }}>\n            <Grid flex={1} templateColumns={'40px 1fr 1fr'} templateRows={'40px 1fr 1fr'} gap={4} padding={10}>\n                <GridItem></GridItem>\n                <GridItem>URGENT</GridItem>\n                <GridItem>NOT URGENT</GridItem>\n                <GridItem>\n                    <Text style={{writingMode: 'vertical-rl', textOrientation: 'upright'}}>IMPORTANT</Text>\n                </GridItem>\n                <GridItem ref={topLeftAreaRef} background=\"rgb(65,208,138)\" borderRadius={15}></GridItem>\n                <GridItem ref={topRightAreaRef} background=\"rgb(234,195,27)\" borderRadius={15}></GridItem>\n                <GridItem>\n                    <Text style={{writingMode: 'vertical-rl', textOrientation: 'upright'}}>NOT IMPORTANT</Text>\n                </GridItem>\n                <GridItem ref={bottomLeftAreaRef} background=\"rgb(44,138,162)\" borderRadius={15}></GridItem>\n                <GridItem ref={bottomRightAreaRef} background=\"rgb(208,38,0)\" borderRadius={15}></GridItem>\n            </Grid>\n            <Box position=\"absolute\">\n                {ids.map((eachID) => (\n                    <Rectangle key={`canvas-${eachID}`} itemID={eachID} />\n                ))}\n            </Box>\n        </Flex>\n    );\n};\n","import {v4 as uuidV4} from 'uuid';\nimport {Icon, IconButton} from '@chakra-ui/react';\nimport React, {FC} from 'react';\nimport {GrAdd} from 'react-icons/gr';\nimport {useSetRecoilState} from 'recoil';\nimport {TodoIDListAtom} from '../Atom';\n\nconst AddTodo: FC = () => {\n    const setIds = useSetRecoilState(TodoIDListAtom);\n    return (\n        <>\n            <IconButton\n                aria-label=\"addNewTodo\"\n                isRound\n                icon={<Icon as={GrAdd} />}\n                onClick={() => {\n                    const newID = uuidV4();\n                    setIds((prev) => [...prev, newID]);\n                }}\n            />\n        </>\n    );\n};\nexport default AddTodo;\n","import {Button, Flex, Input} from '@chakra-ui/react';\nimport React, {FC} from 'react';\nimport {v4 as uuidV4} from 'uuid';\nimport {useForm} from 'react-hook-form';\nimport {useRecoilCallback} from 'recoil';\nimport {OneTodoStateAtom, TodoIDListAtom} from '../Atom';\nimport {ID, TodoType} from '../../type';\n\ninterface FormDataInterface {\n    itemName: string;\n}\n\nconst AddTodoForm: FC = () => {\n    const {\n        register,\n        handleSubmit,\n        formState: {errors},\n        setValue,\n    } = useForm<FormDataInterface>();\n\n    const createNewTodo = useRecoilCallback(\n        ({set}) => (id: ID, newTodo: TodoType) => {\n            set(TodoIDListAtom, (prev) => [...prev, id]);\n            set(OneTodoStateAtom(id), newTodo);\n        },\n        [],\n    );\n    return (\n        <div>\n            <form\n                onSubmit={handleSubmit((data) => {\n                    const newID = uuidV4();\n                    const newTodo: TodoType = {\n                        id: newID,\n                        title: data.itemName,\n                        description: '',\n                        completed: false,\n                        important: false,\n                        urgent: false,\n                        isEditing: false,\n                        inCanvas: false,\n                    };\n                    createNewTodo(newID, newTodo);\n                    setValue('itemName', '');\n                })}>\n                <Flex>\n                    <Input\n                        variant=\"flushed\"\n                        placeholder=\"ADD New TODO\"\n                        size=\"lg\"\n                        isInvalid={!!errors.itemName}\n                        {...register('itemName', {\n                            required: true,\n                            maxLength: '30',\n                        })}\n                    />\n                    <Button colorScheme=\"teal\" size=\"lg\" type=\"submit\">\n                        ADD\n                    </Button>\n                </Flex>\n            </form>\n        </div>\n    );\n};\nexport default AddTodoForm;\n","import {\n    AlertDialog,\n    AlertDialogBody,\n    AlertDialogContent,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogOverlay,\n    Button,\n} from '@chakra-ui/react';\nimport React, {FC} from 'react';\ninterface Props {\n    isOpen: boolean;\n    onClose: () => void;\n    onClickConfirm: () => void;\n}\nconst ConfirmDeleteDialog: FC<Props> = ({isOpen, onClose, onClickConfirm}) => {\n    // const [isOpen, setIsOpen] = React.useState(false);\n    // const onClose = () => setIsOpen(false);\n    const cancelRef = React.useRef(null);\n\n    return (\n        <>\n            <AlertDialog isOpen={isOpen} leastDestructiveRef={cancelRef} onClose={onClose}>\n                <AlertDialogOverlay>\n                    <AlertDialogContent>\n                        <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n                            Delete TODO ?\n                        </AlertDialogHeader>\n\n                        <AlertDialogBody>Are you sure? You can't undo this action afterwards.</AlertDialogBody>\n\n                        <AlertDialogFooter>\n                            <Button ref={cancelRef} onClick={onClose}>\n                                Cancel\n                            </Button>\n                            <Button colorScheme=\"red\" onClick={onClickConfirm} ml={3}>\n                                Delete\n                            </Button>\n                        </AlertDialogFooter>\n                    </AlertDialogContent>\n                </AlertDialogOverlay>\n            </AlertDialog>\n        </>\n    );\n};\nexport default ConfirmDeleteDialog;\n","import React, {FC, useCallback, useState} from 'react';\nimport {\n    Box,\n    Checkbox,\n    Flex,\n    Icon,\n    IconButton,\n    Input,\n    Menu,\n    MenuButton,\n    MenuItem,\n    MenuList,\n    Switch,\n} from '@chakra-ui/react';\nimport {GiPencilBrush} from 'react-icons/gi';\nimport {VscCheck, VscClose} from 'react-icons/vsc';\nimport {BiEraser, BiDotsHorizontalRounded} from 'react-icons/bi';\nimport {useRecoilState, useRecoilValue, useSetRecoilState} from 'recoil';\nimport {AreaRangeAtom, OneTodoStateAtom, RectangleStateAtom, TodoIDListAtom} from '../Atom';\nimport {ID, RectangleRangeType, TodoType} from '../../type';\nimport {useForm} from 'react-hook-form';\nimport ConfirmDeleteDialog from '../widgets/ConfirmDeleteDialog';\n\ninterface Props {\n    itemID: ID;\n}\n\nconst toggleOneTodo = (\n    prev: TodoType,\n    felid: 'completed' | 'urgent' | 'important' | 'inCanvas' | 'isEditing',\n): TodoType => {\n    return {...prev, [felid]: !prev[felid]};\n};\n\nconst removeOneIDInIDList = (list: ID[], id: ID) => {\n    return list.filter((eachID) => eachID !== id);\n};\n\nconst ListBox: FC<Props> = ({itemID}) => {\n    const [oneTodo, setOneTodo] = useRecoilState(OneTodoStateAtom(itemID));\n    const setIDs = useSetRecoilState(TodoIDListAtom);\n    const setRectangle = useSetRecoilState(RectangleStateAtom(itemID));\n    const AreaRange = useRecoilValue(AreaRangeAtom);\n\n    const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n    const {register, handleSubmit} = useForm();\n\n    const onDeleteDialogClose = () => {\n        setIsDeleteDialogOpen(false);\n    };\n\n    const getAreaInitLocation = useCallback(\n        (urgent: boolean, important: boolean) => {\n            let range: RectangleRangeType;\n            if (urgent && important) range = AreaRange.topLeft;\n            else if (urgent && !important) range = AreaRange.bottomLeft;\n            else if (!urgent && important) range = AreaRange.topRight;\n            else range = AreaRange.bottomRight;\n\n            return {top: range.topMin, left: range.leftMin};\n        },\n        [AreaRange],\n    );\n\n    return (\n        <Box h=\"50px\" marginBottom={10}>\n            {oneTodo.isEditing ? (\n                <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                    <form\n                        id={`addNewTodo-${oneTodo?.id}`}\n                        onSubmit={handleSubmit((data) => {\n                            setOneTodo((prev) => ({...prev, title: data.newTitleName, isEditing: false}));\n                        })}>\n                        <Input\n                            placeholder=\"Type a title\"\n                            autoFocus\n                            {...register('newTitleName', {\n                                required: true,\n                                maxLength: '30',\n                            })}\n                        />\n                    </form>\n                    <Box w=\"30%\">\n                        <Flex justifyContent=\"space-around\">\n                            <IconButton\n                                aria-label=\"check\"\n                                colorScheme=\"teal\"\n                                type=\"submit\"\n                                form={`addNewTodo-${oneTodo?.id}`}\n                                isRound\n                                icon={<Icon as={VscCheck} />}\n                            />\n                            <IconButton\n                                aria-label=\"close\"\n                                colorScheme=\"red\"\n                                onClick={() => {\n                                    // click close just after initialization\n                                    if (oneTodo.title === '') setIDs((prev) => removeOneIDInIDList(prev, itemID));\n                                    // click close when canceling edition\n                                    else setOneTodo((prev) => toggleOneTodo(prev, 'isEditing'));\n                                }}\n                                isRound\n                                icon={<Icon as={VscClose} />}\n                            />\n                        </Flex>\n                    </Box>\n                </Flex>\n            ) : (\n                <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                    <Checkbox\n                        size=\"lg\"\n                        isChecked={oneTodo?.completed}\n                        onChange={() => {\n                            setOneTodo((prev) => toggleOneTodo(prev, 'completed'));\n                        }}\n                    />\n                    <Box\n                        w=\"40%\"\n                        onDoubleClick={() => {\n                            setOneTodo((prev) => toggleOneTodo(prev, 'isEditing'));\n                        }}>\n                        {oneTodo?.title}\n                    </Box>\n\n                    <Flex direction=\"column\" justifyContent=\"center\">\n                        <Flex>\n                            <p>Urgent: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n                            <Switch\n                                isChecked={oneTodo?.urgent}\n                                colorScheme=\"teal\"\n                                size=\"md\"\n                                onChange={() => {\n                                    setOneTodo((prev) => toggleOneTodo(prev, 'urgent'));\n                                    let willUrgent = !oneTodo.urgent;\n                                    let initRectPosition = getAreaInitLocation(willUrgent, oneTodo.important);\n                                    setRectangle((prev) => ({...prev, position: initRectPosition}));\n                                }}\n                            />\n                        </Flex>\n                        <Flex>\n                            <p>Important: &nbsp; </p>\n                            <Switch\n                                isChecked={oneTodo?.important}\n                                colorScheme=\"teal\"\n                                size=\"md\"\n                                onChange={() => {\n                                    setOneTodo((prev) => toggleOneTodo(prev, 'important'));\n                                    let willImportant = !oneTodo.important;\n                                    let initRectPosition = getAreaInitLocation(oneTodo.urgent, willImportant);\n                                    setRectangle((prev) => ({...prev, position: initRectPosition}));\n                                }}\n                            />\n                        </Flex>\n                    </Flex>\n                    <IconButton\n                        colorScheme=\"teal\"\n                        aria-label=\"add-new-todo-form-submit\"\n                        size=\"md\"\n                        isRound\n                        onClick={() => {\n                            setOneTodo((prev) => toggleOneTodo(prev, 'inCanvas'));\n                        }}\n                        icon={<Icon as={oneTodo?.inCanvas ? BiEraser : GiPencilBrush} />}\n                    />\n\n                    <Menu>\n                        <MenuButton as={IconButton} aria-label=\"todo-actions\" icon={<BiDotsHorizontalRounded />} />\n                        <MenuList>\n                            <MenuItem\n                                onClick={() => {\n                                    setIsDeleteDialogOpen(true);\n                                }}>\n                                Delete\n                            </MenuItem>\n                            <MenuItem\n                                onClick={() => {\n                                    setOneTodo((prev) => toggleOneTodo(prev, 'isEditing'));\n                                }}>\n                                {'Edit Title Name'}\n                            </MenuItem>\n                        </MenuList>\n                    </Menu>\n\n                    <ConfirmDeleteDialog\n                        isOpen={isDeleteDialogOpen}\n                        onClose={onDeleteDialogClose}\n                        onClickConfirm={() => {\n                            onDeleteDialogClose();\n                            setIDs((prev) => removeOneIDInIDList(prev, itemID));\n                        }}\n                    />\n                </Flex>\n            )}\n        </Box>\n    );\n};\nexport default ListBox;\n","import {StackDivider, VStack} from '@chakra-ui/react';\nimport React, {FC} from 'react';\n\nimport {useRecoilValue} from 'recoil';\nimport {sortTodoIDsList} from '../Atom';\nimport ListBox from './ListBox';\n\nimport {Flipper, Flipped} from 'react-flip-toolkit';\n\nconst ListTable: FC = () => {\n    const todoList = useRecoilValue(sortTodoIDsList);\n\n    return (\n        <div>\n            <Flipper flipKey={todoList.join('')}>\n                <VStack\n                    divider={<StackDivider borderColor=\"gray.200\" />}\n                    spacing={4}\n                    align=\"stretch\"\n                    data-testid=\"test-table-list\">\n                    {todoList.map((id) => {\n                        return (\n                            <Flipped key={id} flipId={id}>\n                                <div>\n                                    <ListBox itemID={id} />\n                                </div>\n                            </Flipped>\n                        );\n                    })}\n                </VStack>\n            </Flipper>\n        </div>\n    );\n};\nexport default ListTable;\n","import {Flex} from '@chakra-ui/layout';\nimport {Box} from '@chakra-ui/react';\nimport React, {FC} from 'react';\nimport AddTodoIconBtn from './AddTodoIconBtn';\nimport AddTodoForm from './AddTodoForm';\nimport ListTable from './ListTable';\n\nconst TodoTablePanel: FC = () => {\n    return (\n        <Box padding={3}>\n            <AddTodoForm />\n            <br />\n            <ListTable />\n            <Flex justifyContent=\"center\">\n                <AddTodoIconBtn />\n            </Flex>\n        </Box>\n    );\n};\nexport default TodoTablePanel;\n","import {Grid, GridItem} from '@chakra-ui/layout';\nimport React, {FC} from 'react';\nimport {Canvas} from './components/Canvas/Canvas';\nimport TodoTablePanel from './components/TodoTable/TodoTablePanel';\n\nconst App: FC = () => {\n    return (\n        <Grid h=\"100vh\" templateRows=\"1fr\" templateColumns=\"repeat(4, 1fr)\" gap={3} margin=\"5px\">\n            <GridItem colSpan={1} border=\"1px solid #333\" padding=\"3px\">\n                <TodoTablePanel />\n            </GridItem>\n            <GridItem colSpan={3} border=\"1px solid #333\">\n                <Canvas />\n            </GridItem>\n        </Grid>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {RecoilRoot} from 'recoil';\nimport {ChakraProvider} from '@chakra-ui/react';\n\nReactDOM.render(\n    <React.StrictMode>\n        <ChakraProvider>\n            <RecoilRoot>\n                <App />\n            </RecoilRoot>\n        </ChakraProvider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}